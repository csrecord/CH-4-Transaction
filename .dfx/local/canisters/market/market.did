type UpdateArgs = 
 record {
   index: nat;
   newAmount: nat;
   newDelta: nat;
   newPrice: nat;
 };
type Sell = 
 service {
   addCompany: (Company) -> (bool);
   cancelBuy: (CancelArgs) -> (Result_1);
   cancelSell: (CancelArgs) -> (Result_1);
   deal: () -> ();
   getBuyList: () -> (vec OrderExt) query;
   getDeals: () -> (vec DealOrder) query;
   getSellList: () -> (vec OrderExt) query;
   listBuy: (ListArgs) -> (Result_1);
   listSell: (ListArgs) -> (Result_1);
   updateBuy: (UpdateArgs) -> (Result);
   updateSell: (UpdateArgs) -> (Result);
 };
type Result_1 = 
 variant {
   err: Error;
   ok: nat;
 };
type Result = 
 variant {
   err: Error;
   ok: bool;
 };
type OrderStatus = 
 variant {
   cancel: nat;
   done: nat;
   open: nat;
 };
type OrderExt = 
 record {
   amount: nat;
   createAt: int;
   delta: nat;
   index: nat;
   owner: principal;
   price: nat;
   status: OrderStatus;
 };
type ListArgs = 
 record {
   amount: nat;
   delta: nat;
   price: nat;
 };
type Error = 
 variant {
   AmountTooSmall;
   BlockUsed;
   Change_Old_listSellMap_Error;
   Equal_No_Need_Update;
   ErrorOperationStyle;
   ErrorTo;
   InsufficientAllowance;
   InsufficientBalance;
   Insufficient_CH4;
   Insufficient_cny;
   Invaild_index;
   LedgerTrap;
   Order_Not_Open;
   Other;
   TransferFrom_CH4_Error;
   TransferFrom_cny_Error;
   Transfer_ToUser_Error;
   Unauthorized;
 };
type DealOrder = 
 record {
   amount: nat;
   buyOrderIndex: nat;
   buyer: principal;
   dealTime: int;
   price: nat;
   sellOrderIndex: nat;
   seller: principal;
   sum: nat;
 };
type Company = 
 record {
   desc: text;
   name: text;
   "principal": principal;
   webLink: text;
 };
type CancelArgs = record {index: nat;};
service : (principal, principal, principal, principal) -> Sell
