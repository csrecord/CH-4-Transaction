// Version: 1.0.0
type AssocList<K, V> = List<(K, V)>;
type AssocList__1<K, V> = AssocList<K, V>;
type Branch<K, V> = {left : Trie<K, V>; right : Trie<K, V>; size : Nat};
type Hash = Nat32;
type Key<K> = {hash : Hash; key : K};
type Leaf<K, V> = {keyvals : AssocList__1<Key<K>, V>; size : Nat};
type List<T> = ?(T, List<T>);
type Operation = {#approve; #burn; #mint; #transfer; #transferFrom};
type Time = Int;
type TransactionStatus = {#failed; #inprogress; #succeeded};
type Trie<K, V> = {#branch : Branch<K, V>; #empty; #leaf : Leaf<K, V>};
actor {
  stable var admins :
    {#branch : Branch<Principal, ()>; #empty; #leaf : Leaf<Principal, ()>};
  stable var allowanceEntries : [(Principal, [(Principal, Nat)])];
  stable var balanceEntries : [(Principal, Nat)];
  stable var blackhole : Principal;
  stable var burned_entries : [(Principal, Nat)];
  stable var decimals_ : Nat8;
  stable var fee : Nat;
  stable var feeTo : Principal;
  stable genesis :
    {
      amount : Nat;
      caller : ?Principal;
      fee : Nat;
      from : Principal;
      index : Nat;
      op : Operation;
      status : TransactionStatus;
      timestamp : Time;
      to : Principal
    };
  stable var logo_ : Text;
  stable var minted_entries : [(Principal, Nat)];
  stable var name_ : Text;
  stable var owner_ : Principal;
  stable var symbol_ : Text;
  stable var totalSupply_ : Nat;
  stable var txcounter : Nat
};
